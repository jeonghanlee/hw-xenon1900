#----------------------------------------------------------------------
#
#  StreamDevice protocol file for a reading/setting selected elements
#  from a HoneyWell Xenon 1900 Barcode scanner
#
#  author : Jeong Han Lee
#  email  : jeonghan.lee@gmail.com
#  Date   : 
#  version : 0.0.1
#
#----------------------------------------------------------------------

# Move out the Terminators' definition in st.cmd
#
# OutTerminator = CR;
# InTerminator = LF CR;
    
ReplyTimeout = 1000;
ReadTimeout  = 300;




# #----------------------------------------------------------------------
# # $(SYSDEV):RMT_RSTS
# #
# getRemoteMode {
#     out "CMD";
#     in "%{LOC|REM}";
# #    ExtraInput = Ignore;
# }

# #----------------------------------------------------------------------
# # $(SYSDEV):RMT_CM
# #
# setRemoteMode {
#     out "%{LOC|REM}";
#     in "%(\$1.VAL)s";
# #       ExtraInput = Ignore;
#     @init {getRemoteMode;}
# }

# # ----------------------------------------------------------------------
# # $(SYSDEV):RLOC_CMD ($(SYSDEV):RLOC_RSTS) 
# #
# setRemLock {
#     out "RLOCK";
#     in "%(\$1.VAL)39c";      
# }

# sendCmd {
#     out "\$1";
# }

# sendVal {
#     out "\$1 \$2";
# }


# # Any scaler value
# #  string:  getVal(ID,s) will send "ID?" and expect "%s".
# getVal {
#     out "\$1";
#     in "%\$2";
# }

# setVal {
# 	out "\$1 %\$2";
# }


# getId {
#     out "ID";
#     in "%63c";
#     in "%(\$1.VAL)63c";
#     in "%(\$2.VAL)63c";
#     in "%(\$3.VAL)63c";
# }


# getVer {
#     out "VER";
#     in "%23c";
#     in "%(\$1.VAL)23c";
#     in "%(\$2.VAL)23c";
# }

# getPrint {
#     out "PRINT";
#     in "%15c";
#     in "%(\$1.VAL)15c";
# }

# debug {
#     ExtraInput = Ignore;
#     out "%s"; in "%39c"
# }


# #%(\1)39c

# #%(\$1Serial.VAL)39[^,]


# #----------------------------------------------------------------------
# # get raw status word (6-byte hex)
# #
# getStatusWord1 {
#     out "S1H";
#     in "%06X";
# }

# #----------------------------------------------------------------------
# # get an AD reading
# #
# getAD {
#   out "AD \$1";
#   in "%d";
# }

# #----------------------------------------------------------------------
# # on/off
# #
# setofFoN {
#     out "%{N|F}";
# }

# #----------------------------------------------------------------------
# # reset
# #
# reset {
#   out "RS";
# }

# #----------------------------------------------------------------------
# # get a DA value
# getDA {
#   out "DA \$1";
#   in "%d";
# }

# #----------------------------------------------------------------------
# # set a DA value
# setDA {
#   out "DA \$1,%d";
# }




# #----------------------------------------------------------------------
# # send a raw command
# #
# sendRawCommand {
#   out "%s";
# }

# #----------------------------------------------------------------------
# # send a raw query (needs argument for PV to receive reply)
# #
# sendRawQuery {
#   ExtraInput = Ignore;
#   out "%s";
#   in  "%(\$1)40c";
# }

# #----------------------------------------------------------------------

